<?php

namespace Lci\BoilerBoxBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Lci\BoilerBoxBundle\Entity\ObjRechercheProbleme;
use Lci\BoilerBoxBundle\Entity\User;

/**
 * ProblemeTechniqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProblemeTechniqueRepository extends EntityRepository
{
	protected $numVariable = 0;

	public function myCountOwnProblemes(User $user){
		$qb = $this->createQueryBuilder('ptech')
            ->leftJoin('ptech.user', 'u')
			->select('COUNT(ptech)')
			->where('u = :userId')
			->setParameter('userId', $user);
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function myCountOwnNoClosProblemes(User $user){
		$qb = $this->createQueryBuilder('ptech')
			->leftJoin('ptech.user', 'u')
			->select('COUNT(ptech)')
			->where('u = :userId')
			->andWhere('ptech.cloture = false')
			->setParameter('userId', $user);
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function myFindProblemes(ObjRechercheProbleme $objet_probleme, $type_resultat, $colonne_trie, $ordre_trie) {
        $qb = $this->createQueryBuilder('ptech')
			->leftJoin('ptech.module', 'm')
			->leftJoin('ptech.equipement', 'e')
			->addSelect('e')
			->leftJoin('ptech.user', 'u')
			->addSelect('u');
			
		// Affichage des tickets dont les modules sont actifs
		$qb->andWhere($qb->expr()->eq('m.actif', ':actif'));
		$qb->setParameter('actif', true);

		if ($objet_probleme->getReference() != null) {
			$this->addCondition($qb, 'ptech', 'id',  $objet_probleme->getReference(), null, '=');
		}
		if ($objet_probleme->getType() != null) {
			$this->addCondition($qb, 'm', 'type',  $objet_probleme->getType(), null, '=');
		}
		if ($objet_probleme->getDateDebut() != null) {
			if ($objet_probleme->getDateFin() == null) {
				$this->addCondition($qb, 'ptech', 'dateSignalement', $objet_probleme->getDateDebut()->format('Y-m-d H:i:s'), null, '>');
			} else {
				$this->addCondition($qb, 'ptech', 'dateSignalement', $objet_probleme->getDateDebut()->format('Y-m-d H:i:s'), $objet_probleme->getDateFin()->format('Y-m-d H:i:s'), 'between');
			}
		} elseif ($objet_probleme->getDateFin() != null) {
			$this->addCondition($qb, 'ptech', 'dateSignalement', $objet_probleme->getDateFin()->format('Y-m-d H:i:s'), null, '<');
		}
		if ($objet_probleme->getModuleId() != null) {
			$this->addCondition($qb, 'm', 'id', $objet_probleme->getModuleId(), null, 'in');
		}
		if ($objet_probleme->getIntervenantId() != null) {
			$this->addCondition($qb, 'u', 'id', $objet_probleme->getIntervenantId(), null, '=');
		}
        if ($objet_probleme->getEquipementId() != null) {
            $this->addCondition($qb, 'e', 'id', $objet_probleme->getEquipementId(), null, '=');
        }
		// Si $objet_probleme->getNonCorrige() != null && objet_probleme->getCorrige() != null =>  Comportement par défaut : Recherche des problèmes sans tenir compte de leur état résolus ou non
		if ($objet_probleme->getCorrige() != null) {
			if ($objet_probleme->getNonCorrige() == null) {	
				$this->addCondition($qb, 'ptech', 'corrige', 1, null, '=');	
			}
		} elseif ($objet_probleme->getNonCorrige() != null) {
			$this->addCondition($qb, 'ptech', 'corrige', 0, null, '=');
		}
		// Si $objet_probleme->getNonCloture() != null && objet_probleme->getCloture() != null =>  Comportement par défaut : Recherche des problèmes sans tenir compte de leur état clos ou non
		if ($objet_probleme->getCloture() != null) {
			if ($objet_probleme->getNonCloture() == null) {	
				$this->addCondition($qb, 'ptech', 'cloture', 1, null, '=');	
			}
		} elseif ($objet_probleme->getNonCloture() != null) {
			$this->addCondition($qb, 'ptech', 'cloture', 0, null, '=');
		}
	
		if ($objet_probleme->getBloquant() != null) {
			if ($objet_probleme->getNonBloquant() == null) {	
				$this->addCondition($qb, 'ptech', 'bloquant', 1, null, '=');	
			}
		} elseif ($objet_probleme->getNonBloquant() != null) {
			$this->addCondition($qb, 'ptech', 'bloquant', 0, null, '=');
		}
		if ($objet_probleme->getPresent() != null) {
			if ($objet_probleme->getNonPresent() == null) {	
				$this->addCondition($qb, 'm', 'present', 1, null, '=');	
			}
		} elseif ($objet_probleme->getNonPresent() != null) {
			$this->addCondition($qb, 'm', 'present', 0, null, '=');
		}
		if ($colonne_trie != null) {
			switch($colonne_trie){
				case 'dateSignalement':
					$qb->orderBy('ptech.dateSignalement', $ordre_trie);
					break;
				case 'id':
					$qb->orderBy('ptech.id', $ordre_trie);
					break;
				case 'intervenant':
					$qb->orderBy('u.username', $ordre_trie);
					break;
				case 'module':
					$qb->orderBy('m.numero', $ordre_trie);
					break;
				case 'equipement':
					$qb->orderBy('e.type', $ordre_trie);
					break;
				case 'corrige':
					$qb->orderBy('ptech.corrige', $ordre_trie);
					break;
				case 'cloture':
					$qb->orderBy('ptech.cloture', $ordre_trie);
					break;
				case 'bloquant':
					$qb->orderBy('ptech.bloquant', $ordre_trie);
					break;
				default:
					break;
			}	
		}
		//echo "<br />".$qb->getQuery()->getSql();
		if ($type_resultat == 'tableau') {
			return $qb->getQuery()->getArrayResult();
		} elseif ($type_resultat == 'entities') {
			return $qb->getQuery()->getResult();
		}
	}

    private function addCondition($qb, $table, $intitule_parametre, $valeur_parametre1, $valeur_parametre2, $condition){
            if ($valeur_parametre1 !== null) {
				if ($condition == 'between') {
					if ($valeur_parametre2 != null) {
						$numVar1 = $this->numVariable + 1;
						$numVar2 = $this->numVariable + 2;
                		$qb->andWhere($table.'.'.$intitule_parametre.' BETWEEN :param'.$numVar1.' and :param'.$numVar2);
						$qb->setParameter('param'.$numVar1, $valeur_parametre1);
						$qb->setParameter('param'.$numVar2, $valeur_parametre2);
						$this->numVariable = $numVar2;
					}
				} elseif ($condition == 'in') {
					$this->numVariable ++;
					$qb->andWhere($qb->expr()->in($table.'.'.$intitule_parametre, array($valeur_parametre1)));
				} else {
					$this->numVariable ++;
					$qb->andWhere($table.'.'.$intitule_parametre.' '.$condition.' :param'.$this->numVariable);
					$qb->setParameter('param'.$this->numVariable, $valeur_parametre1);
				}
            }
    }

}
