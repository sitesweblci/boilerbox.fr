<?php

namespace Lci\BoilerBoxBundle\Repository;

use Doctrine\DBAL\Exception\Exception;

use Lci\BoilerboxBundle\Entity\Site;

/**
 * ReplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReplicationRepository extends \Doctrine\ORM\EntityRepository
{

	// Affiche l'ensemble des masters
    public function getReplicationsInfos()
    {
       	$connexion = $this->getEntityManager()->getConnection();
       	$sql = '
       	    SHOW ALL slaves STATUS;
       	';
       	$requete = $connexion->prepare($sql);
       	$requete->execute();
        return $requete->fetchAll();
    }


/*
 Fonction qui permet de récupérer les informations de synchronisation pour un site
     ! Exception levée - Erreur du programme si le site passé en argument n'est pas dans la liste des masters
*/
/*
	public function getSiteLciReplication(Site $site)
	{
		$version = strtolower(substr($site->getAffaire(),0, 1));
		if ($version == 'c')
		{
			$master_name = 'master1'.substr($site->getAffaire(), 1);
		} elseif ($version == 'd')
		{
			$master_name = 'master3'.substr($site->getAffaire(), 1);
		} else {
			$master_name = 'master2'.substr($site->getAffaire(), 1);
		}
		$connexion = $this->getEntityManager()->getConnection();
		$sql = '
            SHOW slave :master STATUS;
        ';
		$requete = $connexion->prepare($sql);
		$requete->bindValue('master', $master_name);
		$requete->execute();
		try {
			$requete->execute();
		}catch(Exception $e) {
   			printf('Erreur MySQL');
		}
        return $requete->fetchAll();
	}
*/

}
