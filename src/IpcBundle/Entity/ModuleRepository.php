<?php

namespace Ipc\ProgBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ModuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModuleRepository extends EntityRepository {

    public function myFindAllListing() {
        return $this
        	->createQueryBuilder('m')
            ->select('m.id','m.intituleModule','m.message', 'g.numeroGenre')
			->leftJoin('m.genre','g')
            ->getQuery()
            ->getArrayResult();
    }

    // Fonction qui retourne un tableau de type : GenreCategorieModuleMessage (exemple 01EX1216)
    // Permet de checked qu'une donnée à insérer en base contient des informations existante
    public function myCreateTab() {
        return $this->getEntityManager()->createQueryBuilder()
                    ->select('m.id','g.numeroGenre','m.categorie','m.numeroModule','m.numeroMessage')
                    ->from($this->_entityName,'m')
                    ->leftJoin('m.genre','g')
                    ->getQuery()
                    ->getArrayResult();
    }

	public function myFindAllListingV2() {
        return $this
            ->createQueryBuilder('m')
			->select('m.id','m.message','m.categorie','m.numeroModule','m.numeroMessage','m.intituleModule','g.numeroGenre')
            ->leftJoin('m.genre','g')
            ->getQuery()
            ->getArrayResult();
    }

	public function findAllSort() {
		return $this	
			->createQueryBuilder('m')
			->orderBy('m.message', 'ASC')
			->getQuery()
			->getResult();
	}

	// Recherche D'Intitules : des intitules de modules sans doublons par ordre croissant, dont le genre est celui passé en paramètre
	public function myFindIntituleByIntituleGenre($intituleGenre) {
        $qb = $this
			->createQueryBuilder('m')
            ->select('DISTINCT m.intituleModule')
            ->leftJoin('m.genre','g')
            ->where('g.intituleGenre = :intituleGenre')
            ->setParameter('intituleGenre',$intituleGenre)
            ->orderBy('m.intituleModule', 'ASC');
        $query = $qb->getQuery();
        $result = $query->getArrayResult();
        return $result;
	}

    // Recherche D'entités : des intitules de modules sans doublons par ordre croissant, dont le genre est celui passé en paramètre
    public function myFindEntityByIntituleGenre($intituleGenre) {
        $qb = $this     
			->createQueryBuilder('m')
            ->leftJoin('m.genre','g')
            ->where('g.intituleGenre = :intituleGenre')
            ->setParameter('intituleGenre',$intituleGenre)
            ->orderBy('m.message', 'ASC');
        $query = $qb->getQuery();
        $result = $query->getResult();
        return $result;
    }


	// Recherche des intitules de modules sans doublon par ordre croissant
	public function myFindAllDistinct() {
		$queryBuilder = $this
			->createQueryBuilder('m')
		    ->select('DISTINCT m.intituleModule')
			->orderBy('m.intituleModule', 'ASC');
		// On récupère la Query à partir du QueryBuilder
		$query = $queryBuilder->getQuery();
		// On récupère les résultats à partir de la Query
		$resultats = $query->getResult();
		// On retourne ces résultats
		return $resultats;
	}

	public function getTagDistinctQuery() {
		return $this
			->createQueryBuilder('m')
			->orderBy('m.intituleModule','ASC')
			->groupBy('m.intituleModule');
	}

	// Retourne les objets modules ayant pour [genres] les id passés en arguments : Utilisé pour la liste déroulante des modules 
	public function myFindAllDistinctSelected($numerosGenres) {
		$queryBuilder = $this
			->getEntityManager()->createQueryBuilder()
		    ->select('DISTINCT m.intituleModule')
		    ->from($this->_entityName,'m')
			->leftjoin('m.genre','g');
		$queryBuilder->where($queryBuilder->expr()->in("g.numeroGenre", $numerosGenres));
		$queryBuilder->orderBy('m.intituleModule');
		$query = $queryBuilder->getQuery();
		$resultats = $query->getResult();
		return $resultats;
	}

    public function myFindModuleByCode($categorie, $numeroMessage, $numeroModule) {
		$module = null;
		$query = $this
			->createQueryBuilder('m')
			->where('m.categorie = :categorie')
			->andWhere('m.numeroMessage = :numeroMessage')
			->andWhere('m.numeroModule = :numeroModule')
			->setParameters(array('categorie' => $categorie, 'numeroMessage' => $numeroMessage, 'numeroModule' => $numeroModule))
			->getQuery();
		try {
			$module = $query ->getSingleResult();
		}catch(\Doctrine\Orm\NoResultException $e) {
			$module = null;
		}
		return($module);
    }

	public function myFindModuleByUnicite($categorie, $numeroMessage, $numeroModule, $idMode) {
        $module = null;
		if ($idMode != null) {
            $query = $this
                ->createQueryBuilder('m')
                ->where('m.categorie = :categorie')
                ->andWhere('m.numeroMessage = :numeroMessage')
                ->andWhere('m.numeroModule = :numeroModule')
				->andWhere('m.mode = :idMode')
                ->setParameters(array('categorie' => $categorie, 'numeroMessage' => $numeroMessage, 'numeroModule' => $numeroModule, 'idMode' => $idMode))
                ->getQuery();
		} else {
		    $query = $this
                ->createQueryBuilder('m')
                ->where('m.categorie = :categorie')
                ->andWhere('m.numeroMessage = :numeroMessage')
                ->andWhere('m.numeroModule = :numeroModule')
                ->andWhere('m.mode is null')
                ->setParameters(array('categorie' => $categorie, 'numeroMessage' => $numeroMessage, 'numeroModule' => $numeroModule))
                ->getQuery();
		}
        try {
            $module = $query ->getSingleResult();
        }catch(\Doctrine\Orm\NoResultException $e) {
            $module = null;
        }
        return($module);
    }


	// Retourne la liste des objet modules ayants pour [genres et intitulés] les valeurs passées en paramètres : Utilisé pour la liste déroulante des messages
    public function myFindAllSelected($numeroGenres, $modules) {
		if ($numerosGenres[0] == 'all') {
			// Tous les genres, Tous les modules
			if ($modules[0] == 'all') {
				$queryBuilder = $this
					->getEntityManager()->createQueryBuilder()
                    ->select('m')
                    ->from($this->_entityName, 'm');
			// Tous les genres, Listes de modules
			} else {
				$queryBuilder = $this
					->getEntityManager()->createQueryBuilder()
                    ->select('m')
				    ->from($this->_entityName, 'm');
               	$queryBuilder->where($queryBuilder->expr()->in("m.intituleModule", $modules));
			}
		// Liste de genres, Tous les modules
		} elseif($modules[0] == 'all') {
			$queryBuilder = $this
				->getEntityManager()->createQueryBuilder()
                ->select('m')
                ->from($this->_entityName, 'm')
			    ->leftjoin('m.genre', 'g');
			$queryBuilder->andWhere($queryBuilder->expr()->in("g.numeroGenre", $numerosGenres));
		// Liste de genres, Liste de module
		} else {
			$queryBuilder = $this
				->getEntityManager()->createQueryBuilder()
                ->select('m')
                ->from($this->_entityName, 'm')
			    ->leftjoin('m.genre', 'g');
			$queryBuilder->where($queryBuilder->expr()->in("m.intituleModule", $modules));
			$queryBuilder->andWhere($queryBuilder->expr()->in("g.numeroGenre", $numerosGenres));
		}
		$queryBuilder->orderBy('m.message');
        $query = $queryBuilder->getQuery();
        $resultats = $query->getResult();
        return $resultats;
    }

	//	Utilisée pour les Lives
    public function myFindExtendByModeAndGenre($idMode, $tabIdGenres) {
		$modules = null;
        $query = $this
        	->createQueryBuilder('m')
		  	->leftJoin('m.mode', 'mo')
			->leftJoin('m.genre', 'g')
            ->where('mo.id = :idMode')
			->andWhere('g.id IN (:listeIdGenres)')
			->orderBy('m.id', 'DESC')
            ->setParameters(array('idMode' => $idMode, 'listeIdGenres' => $tabIdGenres))
            ->getQuery();
        try {
            $modules = $query ->getResult();
        }catch(\Doctrine\Orm\NoResultException $e) {
            $modules = null;
        }
        return($modules);
    }

}
